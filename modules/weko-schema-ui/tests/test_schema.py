from weko_schema_ui.schema import (
    SchemaConverter,
    cache_schema,
    schema_list_render,
    delete_schema,
    get_oai_metadata_formats)
import pytest
from collections import Iterable, OrderedDict
from werkzeug.exceptions import BadRequest

# class SchemaConverter:
# .tox/c1/bin/pytest --cov=weko_schema_ui tests/test_schema.py::test_SchemaConverter -v --cov-branch --cov-report=term --basetemp=/code/modules/weko-schema-ui/.tox/c1/tmp
def test_SchemaConverter(app):
    with app.app_context():
        schema = "tests/data/collection.xsd"
        rootname = "collection"
        res = SchemaConverter(schema, rootname)
        assert isinstance(res, SchemaConverter)
        assert res.namespaces=={'xml': 'http://www.w3.org/XML/1998/namespace', 'xs': 'http://www.w3.org/2001/XMLSchema', '': 'http://example.com/ns/collection'}
        assert res.target_namespace==''

        schema = "tests/data/none.xsd"
        rootname = "collection"
        with pytest.raises(Exception) as e:
            res = SchemaConverter(schema, rootname)
        assert e.type==BadRequest

        schema = "tests/data/oai_dc.xsd"
        rootname = "dc"
        with pytest.raises(Exception) as e:
            res = SchemaConverter(schema, rootname)
        assert e.type==BadRequest

#     def __init__(self, schemafile, rootname):
#     def to_dict(self):
#     def create_schema(self, schema_file):
#         def getXSVal(element_name):  # replace prefix namespace
#         def get_element_type(type):
#         def is_valid_element(element_name):
#         def get_elements(element):
#     def __init__(self, record=None, schema_name=None):
#     def get_ignore_item_from_option(self):
#     def get_mapping_data(self):
#         def get_mapping():
#     def __converter(self, node):
#         def list_reduce(olst):
#         def get_attr(x):
#         def create_json(name, node1, node2):
#         def _check_description_type(_attr, _alst):
#         def json_reduce(node):
#     def get_jpcoar_json(cls, records, schema_name="jpcoar_mapping"):
#     def __get_value_list(self, remove_empty=False):
#         def analysis(field):
#         def set_value(nd, nv):
#         def get_sub_item_value(atr_vm, key, p=None):
#         def get_value_from_content_by_mapping_key(atr_vm, list_key):
#         def get_url(z, key, val):
#         def get_key_value(nd, key=None):
#         def get_exp_value(atr_list):
#         def get_items_value_lst(atr_vm, key, rlst, z=None, kn=None):
#         def analyze_value_with_exp(nlst, exp):
#         def get_atr_value_lst(node, atr_vm, rlst):
#         def get_mapping_value(mpdic, atr_vm, k, atr_name):
#             def remove_empty_tag(mp):
#             def get_type_item(item_type_mapping, atr_name):
#             def get_item_by_type(temporary, type_item):
#             def handle_type_ddi(atr_name, list_type, vlst):
#             def clean_none_value(dct):
#         def remove_hide_data(obj, parentkey):
#         def replace_resource_type_for_jpcoar_v1(atr_vm_item):
#     def create_xml(self):
#         def check_node(node):
#         def get_prefix(str):
#         def get_atr_list(node):
#             def get_max_count(node):
#         def set_children(kname, node, tree, parent_keys,
#         def recorrect_node(val, attr, current_lang, mandatory=True,
#         def merge_json_xml(json, dct):
#         def remove_custom_scheme(name_identifier, v,
#         def count_aff_childs(key, creator_idx):
#         def create_affiliation(numbs_child, k, v, child,
#     def __remove_files_do_not_publish(self):
#         def __get_file_permissions(files_json):
#     def __build_jpcoar_relation(self, list_json_xml):
#         def __build_relation(data):
#     def support_for_output_xml(self, data):
#     def to_list(self):
#         def get_element(str):
#         def get_key_list(nodes):
#     def get_node(self, dc, key=None):
#     def find_nodes(self, mlst):
#         def del_type(nid):
#         def cut_pre(str):
#         def items_node(nid, nlst, index=0):
#         def get_node_dic(key):
#         def get_path_list(key):

# def cache_schema(schema_name, delete=False):
# .tox/c1/bin/pytest --cov=weko_schema_ui tests/test_schema.py::test_cache_schema -v --cov-branch --cov-report=term --basetemp=/code/modules/weko-schema-ui/.tox/c1/tmp
def test_cache_schema(db_oaischema):    
    # def get_schema():
    assert cache_schema("jpcoar_mapping")=={'root_name': 'jpcoar', 'target_namespace': None, 'schema_location': None, 'namespaces': {'': 'https://github.com/JPCOAR/schema/blob/master/2.0/', 'dc': 'http://purl.org/dc/elements/1.1/', 'xs': 'http://www.w3.org/2001/XMLSchema', 'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#', 'xml': 'http://www.w3.org/XML/1998/namespace', 'dcndl': 'http://ndl.go.jp/dcndl/terms/', 'oaire': 'http://namespace.openaire.eu/schema/oaire/', 'jpcoar': 'https://github.com/JPCOAR/schema/blob/master/2.0/', 'dcterms': 'http://purl.org/dc/terms/', 'datacite': 'https://schema.datacite.org/meta/kernel-4/', 'rioxxterms': 'http://www.rioxx.net/schema/v2.0/rioxxterms/'}, 'schema': OrderedDict([('dc:title', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 1), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))])), ('dcterms:alternative', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))])), ('jpcoar:creator', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0)])), ('jpcoar:nameIdentifier', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'required'), ('name', 'nameIdentifierScheme'), ('ref', None), ('restriction', OrderedDict([('enumeration', ['e-Rad', 'NRID', 'ORCID', 'ISNI', 'VIAF', 'AID', 'kakenhi', 'Ringgold', 'GRID'])]))]), OrderedDict([('use', 'optional'), ('name', 'nameIdentifierURI'), ('ref', None)])])]))])), ('jpcoar:creatorName', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))])), ('jpcoar:familyName', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))])), ('jpcoar:givenName', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))])), ('jpcoar:creatorAlternative', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))])), ('jpcoar:affiliation', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0)])), ('jpcoar:nameIdentifier', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'required'), ('name', 'nameIdentifierScheme'), ('ref', None), ('restriction', OrderedDict([('enumeration', ['e-Rad', 'NRID', 'ORCID', 'ISNI', 'VIAF', 'AID', 'kakenhi', 'Ringgold', 'GRID'])]))]), OrderedDict([('use', 'optional'), ('name', 'nameIdentifierURI'), ('ref', None)])])]))])), ('jpcoar:affiliationName', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))]))]))])), ('jpcoar:contributor', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'contributorType'), ('ref', None), ('restriction', OrderedDict([('enumeration', ['ContactPerson', 'DataCollector', 'DataCurator', 'DataManager', 'Distributor', 'Editor', 'HostingInstitution', 'Producer', 'ProjectLeader', 'ProjectManager', 'ProjectMember', 'RegistrationAgency', 'RegistrationAuthority', 'RelatedPerson', 'Researcher', 'ResearchGroup', 'Sponsor', 'Supervisor', 'WorkPackageLeader', 'Other'])]))])])])), ('jpcoar:nameIdentifier', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'required'), ('name', 'nameIdentifierScheme'), ('ref', None), ('restriction', OrderedDict([('enumeration', ['e-Rad', 'NRID', 'ORCID', 'ISNI', 'VIAF', 'AID', 'kakenhi', 'Ringgold', 'GRID'])]))]), OrderedDict([('use', 'optional'), ('name', 'nameIdentifierURI'), ('ref', None)])])]))])), ('jpcoar:contributorName', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))])), ('jpcoar:familyName', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))])), ('jpcoar:givenName', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))])), ('jpcoar:contributorAlternative', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))])), ('jpcoar:affiliation', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0)])), ('jpcoar:nameIdentifier', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'required'), ('name', 'nameIdentifierScheme'), ('ref', None), ('restriction', OrderedDict([('enumeration', ['e-Rad', 'NRID', 'ORCID', 'ISNI', 'VIAF', 'AID', 'kakenhi', 'Ringgold', 'GRID'])]))]), OrderedDict([('use', 'optional'), ('name', 'nameIdentifierURI'), ('ref', None)])])]))])), ('jpcoar:affiliationName', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))]))]))])), ('dcterms:accessRights', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'required'), ('name', 'rdf:resource'), ('ref', 'rdf:resource')])]), ('restriction', OrderedDict([('enumeration', ['embargoed access', 'metadata only access', 'open access', 'restricted access'])]))]))])), ('rioxxterms:apc', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0), ('restriction', OrderedDict([('enumeration', ['Paid', 'Partially waived', 'Fully waived', 'Not charged', 'Not required', 'Unknown'])]))]))])), ('dc:rights', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'rdf:resource'), ('ref', 'rdf:resource')]), OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))])), ('jpcoar:rightsHolder', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0)])), ('jpcoar:nameIdentifier', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'required'), ('name', 'nameIdentifierScheme'), ('ref', None), ('restriction', OrderedDict([('enumeration', ['e-Rad', 'NRID', 'ORCID', 'ISNI', 'VIAF', 'AID', 'kakenhi', 'Ringgold', 'GRID'])]))]), OrderedDict([('use', 'optional'), ('name', 'nameIdentifierURI'), ('ref', None)])])]))])), ('jpcoar:rightsHolderName', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))]))])), ('jpcoar:subject', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')]), OrderedDict([('use', 'optional'), ('name', 'subjectURI'), ('ref', None)]), OrderedDict([('use', 'required'), ('name', 'subjectScheme'), ('ref', None), ('restriction', OrderedDict([('enumeration', ['BSH', 'DDC', 'LCC', 'LCSH', 'MeSH', 'NDC', 'NDLC', 'NDLSH', 'Sci-Val', 'UDC', 'Other'])]))])])]))])), ('datacite:description', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')]), OrderedDict([('use', 'required'), ('name', 'descriptionType'), ('ref', None), ('restriction', OrderedDict([('enumeration', ['Abstract', 'Methods', 'TableOfContents', 'TechnicalInfo', 'Other'])]))])])]))])), ('dc:publisher', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))])), ('datacite:date', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'required'), ('name', 'dateType'), ('ref', None), ('restriction', OrderedDict([('enumeration', ['Accepted', 'Available', 'Collected', 'Copyrighted', 'Created', 'Issued', 'Submitted', 'Updated', 'Valid'])]))])])]))])), ('dc:language', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('restriction', OrderedDict([('patterns', ['^[a-z]{3}$'])]))]))])), ('dc:type', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 1), ('attributes', [OrderedDict([('use', 'required'), ('name', 'rdf:resource'), ('ref', 'rdf:resource')])]), ('restriction', OrderedDict([('enumeration', ['conference paper', 'data paper', 'departmental bulletin paper', 'editorial', 'journal article', 'newspaper', 'periodical', 'review article', 'software paper', 'article', 'book', 'book part', 'cartographic material', 'map', 'conference object', 'conference proceedings', 'conference poster', 'dataset', 'aggregated data', 'clinical trial data', 'compiled data', 'encoded data', 'experimental data', 'genomic data', 'geospatial data', 'laboratory notebook', 'measurement and test data', 'observational data', 'recorded data', 'simulation data', 'survey data', 'interview', 'image', 'still image', 'moving image', 'video', 'lecture', 'patent', 'internal report', 'report', 'research report', 'technical report', 'policy report', 'report part', 'working paper', 'data management plan', 'sound', 'thesis', 'bachelor thesis', 'master thesis', 'doctoral thesis', 'interactive resource', 'learning object', 'manuscript', 'musical notation', 'research proposal', 'software', 'technical documentation', 'workflow', 'other'])]))]))])), ('datacite:version', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0)]))])), ('oaire:versiontype', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'required'), ('name', 'rdf:resource'), ('ref', 'rdf:resource')])]), ('restriction', OrderedDict([('enumeration', ['AO', 'SMUR', 'AM', 'P', 'VoR', 'CVoR', 'EVoR', 'NA'])]))]))])), ('jpcoar:identifier', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'required'), ('name', 'identifierType'), ('ref', None), ('restriction', OrderedDict([('enumeration', ['DOI', 'HDL', 'URI'])]))])])]))])), ('jpcoar:identifierRegistration', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'required'), ('name', 'identifierType'), ('ref', None), ('restriction', OrderedDict([('enumeration', ['JaLC', 'Crossref', 'DataCite', 'PMID'])]))])])]))])), ('jpcoar:relation', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'relationType'), ('ref', None), ('restriction', OrderedDict([('enumeration', ['isVersionOf', 'hasVersion', 'isPartOf', 'hasPart', 'isReferencedBy', 'references', 'isFormatOf', 'hasFormat', 'isReplacedBy', 'replaces', 'isRequiredBy', 'requires', 'isSupplementTo', 'isSupplementedBy', 'isIdenticalTo', 'isDerivedFrom', 'isSourceOf'])]))])])])), ('jpcoar:relatedIdentifier', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'required'), ('name', 'identifierType'), ('ref', None), ('restriction', OrderedDict([('enumeration', ['ARK', 'arXiv', 'DOI', 'HDL', 'ICHUSHI', 'ISBN', 'J-GLOBAL', 'Local', 'PISSN', 'EISSN', 'NAID', 'PMID', 'PURL', 'SCOPUS', 'URI', 'WOS'])]))])])]))])), ('jpcoar:relatedTitle', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))]))])), ('dcterms:temporal', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))])), ('datacite:geoLocation', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0)])), ('datacite:geoLocationPoint', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0)])), ('datacite:pointLongitude', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 1), ('restriction', OrderedDict([('maxInclusive', 180), ('minInclusive', -180)]))]))])), ('datacite:pointLatitude', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 1), ('restriction', OrderedDict([('maxInclusive', 90), ('minInclusive', -90)]))]))]))])), ('datacite:geoLocationBox', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0)])), ('datacite:westBoundLongitude', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 1), ('restriction', OrderedDict([('maxInclusive', 180), ('minInclusive', -180)]))]))])), ('datacite:eastBoundLongitude', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 1), ('restriction', OrderedDict([('maxInclusive', 180), ('minInclusive', -180)]))]))])), ('datacite:southBoundLatitude', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 1), ('restriction', OrderedDict([('maxInclusive', 90), ('minInclusive', -90)]))]))])), ('datacite:northBoundLatitude', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 1), ('restriction', OrderedDict([('maxInclusive', 90), ('minInclusive', -90)]))]))]))])), ('datacite:geoLocationPlace', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0)]))]))])), ('jpcoar:fundingReference', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0)])), ('datacite:funderIdentifier', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'required'), ('name', 'funderIdentifierType'), ('ref', None), ('restriction', OrderedDict([('enumeration', ['Crossref Funder', 'GRID', 'ISNI', 'Other'])]))])])]))])), ('jpcoar:funderName', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 1), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))])), ('datacite:awardNumber', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'awardURI'), ('ref', None)])])]))])), ('jpcoar:awardTitle', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))]))])), ('jpcoar:sourceIdentifier', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'required'), ('name', 'identifierType'), ('ref', None), ('restriction', OrderedDict([('enumeration', ['PISSN', 'EISSN', 'ISSN', 'NCID'])]))])])]))])), ('jpcoar:sourceTitle', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))])), ('jpcoar:volume', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0)]))])), ('jpcoar:issue', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0)]))])), ('jpcoar:numPages', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0)]))])), ('jpcoar:pageStart', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0)]))])), ('jpcoar:pageEnd', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0)]))])), ('dcndl:dissertationNumber', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0)]))])), ('dcndl:degreeName', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))])), ('dcndl:dateGranted', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0)]))])), ('jpcoar:degreeGrantor', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0)])), ('jpcoar:nameIdentifier', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'required'), ('name', 'nameIdentifierScheme'), ('ref', None), ('restriction', OrderedDict([('enumeration', ['e-Rad', 'NRID', 'ORCID', 'ISNI', 'VIAF', 'AID', 'kakenhi', 'Ringgold', 'GRID'])]))]), OrderedDict([('use', 'optional'), ('name', 'nameIdentifierURI'), ('ref', None)])])]))])), ('jpcoar:degreeGrantorName', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))]))])), ('jpcoar:conference', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0)])), ('jpcoar:conferenceName', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))])), ('jpcoar:conferenceSequence', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0)]))])), ('jpcoar:conferenceSponsor', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))])), ('jpcoar:conferenceDate', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'startMonth'), ('ref', None), ('restriction', OrderedDict([('maxInclusive', 12), ('minInclusive', 1), ('totalDigits', 2)]))]), OrderedDict([('use', 'optional'), ('name', 'endYear'), ('ref', None), ('restriction', OrderedDict([('maxInclusive', 2200), ('minInclusive', 1400), ('totalDigits', 4)]))]), OrderedDict([('use', 'optional'), ('name', 'startDay'), ('ref', None), ('restriction', OrderedDict([('maxInclusive', 31), ('minInclusive', 1), ('totalDigits', 2)]))]), OrderedDict([('use', 'optional'), ('name', 'endDay'), ('ref', None), ('restriction', OrderedDict([('maxInclusive', 31), ('minInclusive', 1), ('totalDigits', 2)]))]), OrderedDict([('use', 'optional'), ('name', 'endMonth'), ('ref', None), ('restriction', OrderedDict([('maxInclusive', 12), ('minInclusive', 1), ('totalDigits', 2)]))]), OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')]), OrderedDict([('use', 'optional'), ('name', 'startYear'), ('ref', None), ('restriction', OrderedDict([('maxInclusive', 2200), ('minInclusive', 1400), ('totalDigits', 4)]))])])]))])), ('jpcoar:conferenceVenue', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))])), ('jpcoar:conferencePlace', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'xml:lang'), ('ref', 'xml:lang')])])]))])), ('jpcoar:conferenceCountry', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0), ('restriction', OrderedDict([('patterns', ['^[A-Z]{3}$'])]))]))]))])), ('jpcoar:file', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0)])), ('jpcoar:URI', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'optional'), ('name', 'label'), ('ref', None)]), OrderedDict([('use', 'optional'), ('name', 'objectType'), ('ref', None), ('restriction', OrderedDict([('enumeration', ['abstract', 'dataset', 'fulltext', 'software', 'summary', 'thumbnail', 'other'])]))])])]))])), ('jpcoar:mimeType', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0)]))])), ('jpcoar:extent', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0)]))])), ('datacite:date', OrderedDict([('type', OrderedDict([('maxOccurs', 'unbounded'), ('minOccurs', 0), ('attributes', [OrderedDict([('use', 'required'), ('name', 'dateType'), ('ref', None), ('restriction', OrderedDict([('enumeration', ['Accepted', 'Available', 'Collected', 'Copyrighted', 'Created', 'Issued', 'Submitted', 'Updated', 'Valid'])]))])])]))])), ('datacite:version', OrderedDict([('type', OrderedDict([('maxOccurs', 1), ('minOccurs', 0)]))]))])), ('custom:system_file', OrderedDict([('type', OrderedDict([('minOccurs', 0), ('maxOccurs', 'unbounded')])), ('jpcoar:URI', OrderedDict([('type', OrderedDict([('minOccurs', 0), ('maxOccurs', 1), ('attributes', [OrderedDict([('name', 'objectType'), ('ref', None), ('use', 'optional'), ('restriction', OrderedDict([('enumeration', ['abstract', 'summary', 'fulltext', 'thumbnail', 'other'])]))]), OrderedDict([('name', 'label'), ('ref', None), ('use', 'optional')])])]))])), ('jpcoar:mimeType', OrderedDict([('type', OrderedDict([('minOccurs', 0), ('maxOccurs', 1)]))])), ('jpcoar:extent', OrderedDict([('type', OrderedDict([('minOccurs', 0), ('maxOccurs', 'unbounded')]))])), ('datacite:date', OrderedDict([('type', OrderedDict([('minOccurs', 1), ('maxOccurs', 'unbounded'), ('attributes', [OrderedDict([('name', 'dateType'), ('ref', None), ('use', 'required'), ('restriction', OrderedDict([('enumeration', ['Accepted', 'Available', 'Collected', 'Copyrighted', 'Created', 'Issued', 'Submitted', 'Updated', 'Valid'])]))])])]))])), ('datacite:version', OrderedDict([('type', OrderedDict([('minOccurs', 0), ('maxOccurs', 1)]))]))]))])}


# def delete_schema_cache(schema_name):

# def schema_list_render(pid=None, **kwargs):
# .tox/c1/bin/pytest --cov=weko_schema_ui tests/test_schema.py::test_schema_list_render -v --cov-branch --cov-report=term --basetemp=/code/modules/weko-schema-ui/.tox/c1/tmp
def test_schema_list_render(app, db_oaischema):
    res = schema_list_render()
    for x in res:
        x.pop('pid')
    assert res==[{'name': 'ddi_mapping', 'xsd_file': 'https://ddialliance.org/Specification/DDI-Codebook/2.5/XMLSchema/codebook.xsd', 'file_name': 'codebook.xsd', 'root_name': 'codeBook', 'schema_name': 'ddi_mapping', 'dis': None}, {'name': 'jpcoar', 'file_name': 'jpcoar_scm.xsd', 'root_name': 'jpcoar', 'schema_name': 'jpcoar_v1_mapping', 'dis': None}, {'name': 'jpcoar', 'file_name': 'jpcoar_scm.xsd', 'root_name': 'jpcoar', 'schema_name': 'jpcoar_mapping', 'dis': None}, {'name': 'oai_dc_mapping', 'xsd_file': 'http://dublincore.org/schemas/xmls/simpledc20021212.xsd', 'file_name': 'oai_dc.xsd', 'root_name': 'dc', 'schema_name': 'oai_dc_mapping', 'dis': None}]

# def delete_schema(pid):
# .tox/c1/bin/pytest --cov=weko_schema_ui tests/test_schema.py::test_delete_schema -v --cov-branch --cov-report=term --basetemp=/code/modules/weko-schema-ui/.tox/c1/tmp
def test_delete_schema(app, db_oaischema):
    datas = schema_list_render()
    pid = datas[0]['pid']
    res = delete_schema(pid)
    assert res=='ddi_mapping'

# def get_oai_metadata_formats(app):
# .tox/c1/bin/pytest --cov=weko_schema_ui tests/test_schema.py::test_get_oai_metadata_formats -v --cov-branch --cov-report=term --basetemp=/code/modules/weko-schema-ui/.tox/c1/tmp
def test_get_oai_metadata_formats(app, db_oaischema):
    res = get_oai_metadata_formats(app)
    assert res=={'oai_dc': {'serializer': ('invenio_oaiserver.utils:dumps_etree', {'xslt_filename': '/code/modules/invenio-oaiserver/invenio_oaiserver/static/xsl/MARC21slim2OAIDC.xsl'}), 'schema': 'http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd', 'namespace': 'http://www.w3.org/2001/XMLSchema'}, 'marc21': {'serializer': ('invenio_oaiserver.utils:dumps_etree', {'prefix': 'marc'}), 'schema': 'http://www.loc.gov/standards/marcxml/schema/MARC21slim.xsd', 'namespace': 'http://www.loc.gov/MARC21/slim'}, 'ddi': {'namespace': 'ddi:codebook:2_5', 'schema': 'https://ddialliance.org/Specification/DDI-Codebook/2.5/XMLSchema/codebook.xsd', 'serializer': ('invenio_oaiserver.utils:dumps_etree', {'schema_type': 'ddi'})}, 'jpcoar_v1': {'namespace': 'https://github.com/JPCOAR/schema/blob/master/1.0/', 'schema': 'https://github.com/JPCOAR/schema/blob/master/1.0/jpcoar_scm.xsd', 'serializer': ('invenio_oaiserver.utils:dumps_etree', {'schema_type': 'jpcoar_v1'})}, 'jpcoar': {'namespace': 'https://github.com/JPCOAR/schema/blob/master/2.0/', 'schema': 'https://github.com/JPCOAR/schema/blob/master/2.0/jpcoar_scm.xsd', 'serializer': ('invenio_oaiserver.utils:dumps_etree', {'schema_type': 'jpcoar'})}}
